<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Open World Game Demo</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
    #info {
      position: absolute;
      top: 10px; left: 10px;
      color: white;
      font-family: Arial;
      z-index: 100;
      background: rgba(0,0,0,0.3);
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>
<div id="info">Use arrow keys or touch to move</div>
<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/controls/PointerLockControls.js"></script>

<script>
let scene, camera, renderer, controls;

init();
animate();

function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0xa0a0a0);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.set(0, 2, 5);

    renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Light
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 10, 7.5);
    scene.add(light);

    const ambient = new THREE.AmbientLight(0x404040);
    scene.add(ambient);

    // Ground
    const groundGeometry = new THREE.PlaneGeometry(100, 100);
    const groundMaterial = new THREE.MeshStandardMaterial({color: 0x228B22});
    const ground = new THREE.Mesh(groundGeometry, groundMaterial);
    ground.rotation.x = - Math.PI / 2;
    scene.add(ground);

    // Random cubes as buildings
    for(let i=0;i<50;i++){
        const geometry = new THREE.BoxGeometry(1, Math.random()*5+1, 1);
        const material = new THREE.MeshStandardMaterial({color: Math.random()*0xffffff});
        const cube = new THREE.Mesh(geometry, material);
        cube.position.set((Math.random()-0.5)*50, geometry.parameters.height/2, (Math.random()-0.5)*50);
        scene.add(cube);
    }

    // Controls
    controls = new THREE.PointerLockControls(camera, renderer.domElement);
    document.body.addEventListener('click', () => controls.lock() );

    // Movement
    const move = {forward:false, backward:false, left:false, right:false};
    document.addEventListener('keydown', (e) => { switch(e.key){ case "ArrowUp": case "w": move.forward=true; break; case "ArrowDown": case "s": move.backward=true; break; case "ArrowLeft": case "a": move.left=true; break; case "ArrowRight": case "d": move.right=true; break; } });
    document.addEventListener('keyup', (e) => { switch(e.key){ case "ArrowUp": case "w": move.forward=false; break; case "ArrowDown": case "s": move.backward=false; break; case "ArrowLeft": case "a": move.left=false; break; case "ArrowRight": case "d": move.right=false; break; } });

    // Animate movement
    function movePlayer(){
        const speed = 0.1;
        if(move.forward) controls.moveForward(speed);
        if(move.backward) controls.moveForward(-speed);
        if(move.left) controls.moveRight(-speed);
        if(move.right) controls.moveRight(speed);
        requestAnimationFrame(movePlayer);
    }
    movePlayer();

    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth/window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });
}

function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
</script>
</body>
</html>
